package gana

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestSkipRunes(t *testing.T) {
	assert.Equal(t, SkipRunes[uint](1, "abc"), "bc", `"abc"[1:]`)
	assert.Equal(t, SkipRunes[uint](2, "abc"), "c", `"abc"[2:]`)
	assert.Equal(t, SkipRunes[uint](3, "abc"), "", `"abc"[3:]`)
	assert.Equal(t, SkipRunes[uint](4, "abc"), "", `"abc"[4:]`)
	assert.Equal(t, SkipRunes[uint](0, "abc"), "abc", `"abc"[0:]`)
	assert.Equal(t, SkipRunes[uint](1, ""), "", `""[1:]`)
	// Emojis
	assert.Equal(t, SkipRunes[uint](1, "ağŸ˜€"), "ğŸ˜€", `"ağŸ˜€"[1:]`)
	assert.Equal(t, SkipRunes[uint](2, "ağŸ˜€"), "", `"ağŸ˜€"[2:]`)
	assert.Equal(t, SkipRunes[uint](3, "ağŸ˜€"), "", `"ağŸ˜€"[3:]`)
	assert.Equal(t, SkipRunes[uint](4, "ağŸ˜€"), "", `"ağŸ˜€"[4:]`)
	assert.Equal(t, SkipRunes[uint](0, "ağŸ˜€"), "ağŸ˜€", `"ağŸ˜€"[0:]`)
	// Complex emoji
	assert.Equal(t, SkipRunes[uint](1, "ağŸ˜€ğŸ˜€"), "ğŸ˜€ğŸ˜€", `"ağŸ˜€ğŸ˜€"[1:]`)
	assert.Equal(t, SkipRunes[uint](2, "ağŸ˜€ğŸ˜€"), "ğŸ˜€", `"ağŸ˜€ğŸ˜€"[2:]`)
	assert.Equal(t, SkipRunes[uint](3, "ağŸ˜€ğŸ˜€"), "", `"ağŸ˜€ğŸ˜€"[3:]`)
	assert.Equal(t, SkipRunes[uint](4, "ağŸ˜€ğŸ˜€"), "", `"ağŸ˜€ğŸ˜€"[4:]`)
	assert.Equal(t, SkipRunes[uint](0, "ağŸ˜€ğŸ˜€"), "ağŸ˜€ğŸ˜€", `"ağŸ˜€ğŸ˜€"[0:]`)
}

func TestDropRunes(t *testing.T) {
	assert.Equal(t, DropRunes[uint](1, "abc"), "bc", `"abc"[1:]`)
	assert.Equal(t, DropRunes[uint](2, "abc"), "c", `"abc"[2:]`)
	assert.Equal(t, DropRunes[uint](3, "abc"), "", `"abc"[3:]`)
	assert.Equal(t, DropRunes[uint](4, "abc"), "", `"abc"[4:]`)
	assert.Equal(t, DropRunes[uint](0, "abc"), "abc", `"abc"[0:]`)
	assert.Equal(t, DropRunes[uint](1, ""), "", `""[1:]`)
	// Emojis
	assert.Equal(t, DropRunes[uint](1, "ağŸ˜€"), "ğŸ˜€", `"ağŸ˜€"[1:]`)
	assert.Equal(t, DropRunes[uint](2, "ağŸ˜€"), "", `"ağŸ˜€"[2:]`)
	assert.Equal(t, DropRunes[uint](3, "ağŸ˜€"), "", `"ağŸ˜€"[3:]`)
	assert.Equal(t, DropRunes[uint](4, "ağŸ˜€"), "", `"ağŸ˜€"[4:]`)
	assert.Equal(t, DropRunes[uint](0, "ağŸ˜€"), "ağŸ˜€", `"ağŸ˜€"[0:]`)
	// Complex emoji
	assert.Equal(t, DropRunes[uint](1, "ağŸ˜€ğŸ˜€"), "ğŸ˜€ğŸ˜€", `"ağŸ˜€ğŸ˜€"[1:]`)
	assert.Equal(t, DropRunes[uint](2, "ağŸ˜€ğŸ˜€"), "ğŸ˜€", `"ağŸ˜€ğŸ˜€"[2:]`)
	assert.Equal(t, DropRunes[uint](3, "ağŸ˜€ğŸ˜€"), "", `"ağŸ˜€ğŸ˜€"[3:]`)
	assert.Equal(t, DropRunes[uint](4, "ağŸ˜€ğŸ˜€"), "", `"ağŸ˜€ğŸ˜€"[4:]`)
	assert.Equal(t, DropRunes[uint](0, "ağŸ˜€ğŸ˜€"), "ağŸ˜€ğŸ˜€", `"ağŸ˜€ğŸ˜€"[0:]`)
}
